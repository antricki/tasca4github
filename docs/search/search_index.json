{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"bloques/","title":"2.2. Bloques fundamentales","text":"<ul> <li> <p>Componentes. Bloque de c\u00f3digo que tiene su segmento de HTML y una contraparte de Typescript, que usualmente es una clase. Se busca que los componentes sean bloques peque\u00f1os de c\u00f3digo y lo m\u00e1s simples posibles.</p> </li> <li> <p>Servicios. Te van a permitir trabajar en toda la aplicaci\u00f3n con la informaci\u00f3n centralizada.</p> </li> </ul> <p></p> <ul> <li> <p>Directivas:</p> </li> <li> <p>Directivas de componentes. Es muy parecido a un componente pero tiene un trozo de c\u00f3digo HTML reutilizable.</p> </li> <li>Directivas estructurales. Modifican el DOM o el HTML ya sea a\u00f1adiendo     elementos o elimin\u00e1ndolos.</li> <li> <p>Directivas de atributos. Cambian la apariencia o el comportamiento de un elemento, de otro componente o una directiva.</p> </li> <li> <p>Rutas. Son b\u00e1sicamente diferentes componentes que se pueden mostrar pasado en la URL de un navegador web o la URL en el cual se encuentra el cliente.</p> </li> <li> <p>M\u00f3dulos. Permiten agrupar todo lo dicho anteriormente, inclusive otros m\u00f3dulos. Por ejemplo: podemos tener m\u00f3dulos de productos, m\u00f3dulos de clientes, m\u00f3dulos de autenticaci\u00f3n, m\u00f3dulos de proveedores... Adem\u00e1s, si por ejemplo necesitamos desarrollar un calendario, posiblemente ya haya un m\u00f3dulo de otro programador desarrollado. Dicho m\u00f3dulo se puede incorporar a nuestro proyecto y obtendremos toda su funcionalidad.</p> </li> </ul> <p></p>"},{"location":"caracteristicas/","title":"2.1. Caracter\u00edsticas del Framework","text":""},{"location":"caracteristicas/#11-caracteristicas-del-framework","title":"1.1. Caracter\u00edsticas del Framework","text":"<ul> <li> <p>Marco de trabajo estandarizado. El c\u00f3digo que se puede visualizar ser\u00e1 muy parecido entre diferentes desarrolladores ya que el equipo de Angular recomienda ciertos est\u00e1ndares para desarrollar aplicaciones.</p> </li> <li> <p>Viene con todo lo que necesitas para trabajar. Es raro tener la necesidad de incorporar   paquetes de terceros (a no ser que trabajes con librer\u00edas especializadas).</p> </li> <li> <p>Aplicaciones modulares. Nosotros crearemos m\u00f3dulos para objetivos espec\u00edficos.</p> </li> <li> <p>Lo mantiene Google.</p> </li> </ul> <p>Anotaci\u00f3n</p> <p>\u00bfCu\u00e1l es el mejor framework? Para ello, tomamos en consideraci\u00f3n tres frameworks de los m\u00e1s sobresalientes en los \u00faltimos a\u00f1os: Angular, React y Vue.</p> <p>Hiberus blog</p>"},{"location":"creacion/","title":"3.1. Creaci\u00f3n de un proyecto","text":"<p>Para la creaci\u00f3n de un proyecto en Angular (terminal) usaremos la sentencia:</p> <pre><code>    ng new [nombre del proyecto]\n</code></pre> <p>La estructura de archivos y directorios ser\u00e1 el siguiente:</p> <p></p> <p>Primera visualizaci\u00f3n v\u00eda navegador web de Angular:</p> <pre><code>    cd [ nombre del proyecto]\n    ng serve -o\n</code></pre> <p></p>"},{"location":"explicacion/","title":"3.2. Explicaci\u00f3n de los archivos m\u00e1s importantes del proyecto","text":"<p>En este apartado no se explicar\u00e1 en detalle cada l\u00ednea de c\u00f3digo de cada archivo porque puede ser demasiado. Adem\u00e1s, el alumnado puede buscar por internet si tiene cualquier duda para recolectar m\u00e1s informaci\u00f3n al respecto. Pero si es muy importante conocer y comprender que es cada uno de estos archivos.</p> <p>Tslint.json: archivo de configuraci\u00f3n (linter) donde se especifican reglas que les van a   obligar a programar de cierta manera.</p> <p>Tsconfig.json: archivo de configuraci\u00f3n de typescript. Le dice a typescript como quiere   que se traduzca a JS o como quiere que funcione en este proyecto. Es muy extra\u00f1o que   el usuario haga alguna modificaci\u00f3n en este archivo.</p> <p>Tsconfig.spec.json: extiende del archivo tsconfig.json y le a\u00f1ade funcionalidades. Est\u00e1   relacionado con la parte de las pruebas. B\u00e1sicamente son pruebas unitarias o pruebas   de integraci\u00f3n (ya lo hemos visto en clase). Son pruebas para asegurarse que el c\u00f3digo   del programa funcione como se espera.</p> <p>Tsconfig.app.json: extiende del archivo de configuraci\u00f3n tsconfig.json y tambi\u00e9n le   a\u00f1ade funcionalidades. Lo veremos m\u00e1s adelante.</p> <p>README.md: Funciona a modo de texto mediante el lenguaje markdown. Para   visualizarlo en VSC se pueden seguir los siguientes pasos: Control + Shift + p -&gt;   markdown -&gt; markdown: Open Preview.</p> <p>Package.json: Normalmente es un archivo de configuraci\u00f3n delicado y no se deber\u00edan de hacer modificaciones. Si se quiere a\u00f1adir alguna cosa, como por ejemplo un nuevo paquete, lo haremos mediante comandos. Este archivo se podr\u00eda editar manualmente pero si no lo controlamos muy bien nos puede provocar alg\u00fan que otro dolor de cabeza.   En este archivo est\u00e1n las dependencias que utilizaremos a lo largo del curso.</p> <p>Package.lock.json: Tampoco lo vamos a configurar manualmente pero este archivo nos dice c\u00f3mo se construyen los m\u00f3dulos de node.</p> <p>Angular.js: es un archivo importante para nuestra aplicaci\u00f3n, el cual contiene configuraciones importantes para nuestra aplicaci\u00f3n. Lo iremos viendo a lo largo de la   unidad did\u00e1ctica.</p> <p>.gitignored: archivos que no queremos que Git le d\u00e9 seguimiento en el proyecto.</p> <p>.editorconfig: son reglas para los archivos de TS y .md, etc.</p> <p>Node_modules: contiene todos los m\u00f3dulos. Dispone de paquetes de traducci\u00f3n, errores, errores en la consola HTML, etc.</p>"},{"location":"explicacion/#archivos-dentro-del-src","title":"Archivos dentro del SRC","text":"<p>App.component.html, app.component.scss, app.component.ts y app.componen.spec.ts hacen referencia al mismo componente de la aplicaci\u00f3n.</p> <p>App.modules.ts: es una clase pero dispone de un decorador especial. En este archivo se importar\u00edan los m\u00f3dulos. Podemos decir que es un agrupador de m\u00f3dulos.</p> <p>Assets: se utilizan para colocar recursos est\u00e1ticos en nuestra aplicaci\u00f3n como im\u00e1genes, sonidos o cosas que normalmente no tienen que compilarse o traducirse a JS.</p> <p>Favicon.ico: es el icono que nos aparece en el navegador.</p> <p>Index.html: es la p\u00e1gina de acceso que nosotros estamos viendo.</p> <p>Main.ts: este archivo normalmente nunca se modifica. Ayuda a decirle a Angular en el ambiente en el que est\u00e1 corriendo dependiendo del target que se tenga para las aplicaciones de Angular.</p> <p>Styles.scss: archivos de estilos global de la aplicaci\u00f3n. En este archivo escribiremos el CSS que se aplica a nivel general en toda la aplicaci\u00f3n. A diferencia del archivo app.component.scss que solo se aplicar\u00eda a la componente HTML.</p>"},{"location":"extensiones/","title":"1.2. Extensiones de VSC recomendadas","text":""},{"location":"extensiones/#extensiones-de-vsc-recomendadas","title":"Extensiones de VSC recomendadas","text":"<ul> <li>Bracket Pair Color DLW</li> <li>Material Icon Theme</li> </ul>"},{"location":"extensiones/#instalaciones-de-extensiones-propias-de-angular","title":"Instalaciones de extensiones propias de Angular:","text":"<ul> <li>Angular Snippets.</li> <li>Angular language Service.</li> <li>Angular Inline (ayuda en los templates literales).</li> <li>Auto Close Tag (cierre autom\u00e1tico).</li> <li>TypeScript Importer (ayuda a la autoimportaci\u00f3n de los componenetes, clases, interfaces...)</li> </ul>"},{"location":"instalacion/","title":"1.3. Instalaci\u00f3n de Angular CLI","text":""},{"location":"instalacion/#instalacion-de-angular-cli","title":"Instalaci\u00f3n de Angular CLI","text":"<ul> <li> <p>Documentaci\u00f3n oficial de Angular</p> </li> <li> <p>npm install -g @angular/cli</p> </li> <li> <p>ng help (ayuda de Angular CLI)</p> </li> <li> <p>ng version (Saber la versi\u00f3n de Angular)</p> </li> </ul>"},{"location":"instalaciones/","title":"1.1. Instalaciones recomendadas","text":""},{"location":"instalaciones/#instalaciones-recomendadas","title":"Instalaciones recomendadas","text":"<ul> <li>Visual Studio Code (VSC)</li> <li>Google Chrome</li> <li>Postman</li> <li>Mongo Compass</li> <li>Git</li> <li>Creaci\u00f3n de una cuenta en GitHub</li> <li>Node JS</li> </ul>"}]}